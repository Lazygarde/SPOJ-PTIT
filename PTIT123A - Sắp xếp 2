#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	while (1)
	{
		string a;
		getline(cin, a);
		if (a == ".")
			break;
		int j = 0;
		vector<long long> b;
		vector<string> c;
		vector<int> d, e;
		int pos = 0, pos1 = 0, pos2 = 0;
		while (j < a.size())
		{
			if (a[j] >= '0' && a[j] <= '9')
			{
				long long x = 0;
				while (a[j] != ',')
				{
					int k = a[j] - '0';
					x = x * 10 + k;
					j++;
					if (a[j] == '.')
						break;
				}
				b.push_back(x);
				d.push_back(pos);
				pos++;
			}
			else if (a[j] == '-')
			{
				j++;
				long long x = 0;
				while (a[j] != ',')
				{
					int k = a[j] - '0';
					x = x * 10 + k;
					j++;
					if (a[j] == '.')
						break;
				}
				b.push_back((-1) * x);
				d.push_back(pos);
				pos++;
			}
			else if (a[j] >= 'a' && a[j] <= 'z')
			{
				string x = "";
				while (a[j] != ',')
				{
					x = x + a[j];
					j++;
					if (a[j] == '.')
						break;
				}
				c.push_back(x);
				e.push_back(pos);
				pos++;
			}
			else
				j++;
		}
		sort(b.begin(), b.end());
		sort(c.begin(), c.end());
		if (d.size() == 0)
		{
			for (int i = 0; i < pos; i++)
			{
				cout << c[i];
				if (i < pos - 1)
					cout << ", ";
				else
					cout << ".";
			}
		}
		else
		{
			for (int i = 0; i < pos; i++)
			{
				if (i == d[0])
				{
					cout << b[pos1];
					pos1++;
					d.erase(d.begin() + 0, d.begin() + 1);
				}
				else
				{
					cout << c[pos2];
					pos2++;
				}
				if (i < pos - 1)
					cout << ", ";
				else
					cout << ".";
			}
		}
		cout << endl;
	}
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
