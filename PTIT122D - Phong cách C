#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
bool cmp(pair<char, int> a, pair<char, int> b)
{
	return a.first < b.first;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--)
	{
		string s;
		cin >> s;
		cout << "Expression: " << s << endl;
		s = '+' + s;
		int n = s.size(), pos = 0, ans = 0;
		vector<pair<char, int>> a;
		for (int i = 0; i < n; i++)
		{
			if (s[i] >= 'a' && s[i] <= 'z')
			{
				int k = s[i] - 'a' + 1, pos = i - 1;
				if (i > 1)
				{
					if (s[i - 1] == '-' && s[i - 2] == '-')
						k--;
					else if (s[i - 1] == '+' && s[i - 2] == '+')
						k++;
				}
				a.push_back({s[i], k});
				int m = a.size() - 1;
				if (i > 1 && ((s[i - 1] == '-' && s[i - 2] == '-') || (s[i - 1] == '+' && s[i - 2] == '+')))
					pos -= 2;
				if (s[pos] == '+')
					ans += a[m].second;
				else
					ans -= a[m].second;
				if (i < n - 2)
				{
					if (s[i + 1] == '-' && s[i + 2] == '-')
						k--;
					else if (s[i + 1] == '+' && s[i + 2] == '+')
						k++;
				}
				a[m].second = k;
			}
		}
		sort(a.begin(), a.end(), cmp);
		cout << "value = " << ans << endl;
		for (int i = 0; i < a.size(); i++)
		{
			cout << a[i].first << " = " << a[i].second << endl;
		}
	}
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
