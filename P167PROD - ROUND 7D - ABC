#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
string cong(string a, string b)
{
	int ok = 0;
	string s = "";
	if (a.size() > b.size())
		b.insert(0, a.size() - b.size(), '0');
	else if (a.size() < b.size())
		a.insert(0, b.size() - a.size(), '0');
	int temp = 0;
	for (int i = a.size() - 1; i >= 0; i--)
	{
		temp = a[i] + b[i] - 96 + temp;
		s.insert(0, 1, temp % 10 + 48);
		temp = temp / 10;
	}
	if (temp > 0)
	{
		s.insert(0, 1, temp + 48);
	}
	return s;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	string a, b, c;
	cin >> a >> b >> c;
	int s, pos;
	for (int i = 0; i < a.size(); i++)
	{
		if (a[i] == '?')
		{
			s = 1;
			pos = i;
			break;
		}
	}
	for (int i = 0; i < b.size(); i++)
	{
		if (b[i] == '?')
		{
			s = 2;
			pos = i;
			break;
		}
	}
	for (int i = 0; i < c.size(); i++)
	{
		if (c[i] == '?')
		{
			s = 3;
			pos = i;
			break;
		}
	}
	if (s == 1)
	{
		for (int i = 0; i < 10; i++)
		{
			char k = i + '0';
			a[pos] = k;
			if (cong(a, b) == c)
			{
				cout << i;
				return 0;
			}
		}
	}
	if (s == 2)
	{
		for (int i = 0; i < 10; i++)
		{
			char k = i + '0';
			b[pos] = k;
			if (cong(a, b) == c)
			{
				cout << i;
				return 0;
			}
		}
	}
	if (s == 3)
	{
		for (int i = 0; i < 10; i++)
		{
			char k = i + '0';
			c[pos] = k;
			if (cong(a, b) == c)
			{
				cout << i;
				return 0;
			}
		}
	}
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
