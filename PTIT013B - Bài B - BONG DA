#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
struct data
{
	string name;
	int diem;
};
int cmp(struct data a, struct data b)
{
	if (a.diem < b.diem)
		return 0;
	else if (a.diem == b.diem)
		if (a.name > b.name)
			return 0;
	return 1;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	for (int i = 1; i <= t; i++)
	{
		int n;
		cin >> n;
		string myF, myO;
		cin >> myF >> myO;
		struct data N[25];
		int dMyF, dMyO;
		for (int i = 1; i <= n; i++)
		{
			cin >> N[i].name >> N[i].diem;
			if (N[i].name == myF)
				dMyF = N[i].diem;
			if (N[i].name == myO)
				dMyO = N[i].diem;
		}
		int dF, dO;
		dF = dMyF + 3;
		dO = dMyO + 0;
		for (int i = 1; i <= n; i++)
		{
			if (N[i].name == myF)
				N[i].diem = dF;
			if (N[i].name == myO)
				N[i].diem = dO;
		}
		sort(N + 1, N + n + 1, cmp);
		for (int i = 1; i <= n; i++)
		{
			if (N[i].name == myF)
			{
				cout << i << " ";
				break;
			}
		}
		dF = dMyF + 0;
		dO = dMyO + 3;
		for (int i = 1; i <= n; i++)
		{
			if (N[i].name == myF)
				N[i].diem = dF;
			if (N[i].name == myO)
				N[i].diem = dO;
		}
		sort(N + 1, N + n + 1, cmp);
		for (int i = 1; i <= n; i++)
		{
			if (N[i].name == myF)
			{
				cout << i << " ";
				break;
			}
		}
		dF = dMyF + 1;
		dO = dMyO + 1;
		for (int i = 1; i <= n; i++)
		{
			if (N[i].name == myF)
				N[i].diem = dF;
			if (N[i].name == myO)
				N[i].diem = dO;
		}
		sort(N + 1, N + n + 1, cmp);
		for (int i = 1; i <= n; i++)
		{
			if (N[i].name == myF)
			{
				cout << i;
				break;
			}
		}
		cout << endl;
	}
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
