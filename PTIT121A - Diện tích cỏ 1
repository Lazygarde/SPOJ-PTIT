#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
struct hcn
{
	int x1, y1;
	int x2, y2;
};
bool check(hcn A, int a, int b, int c, int d)
{
	if (A.x1 <= a && a <= A.x2 && A.x1 <= c && c <= A.x2 && A.y2 <= b && b <= A.y1 && A.y2 <= d && d <= A.y1)
		return true;
	return false;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, u = 0;
	cin >> n;
	long long s = 0;
	long long X[100000], Y[100000];
	hcn a[100];
	for (int i = 1; i <= n; i++)
	{
		cin >> a[i].x1 >> a[i].y1 >> a[i].x2 >> a[i].y2;
		u++;
		X[u] = a[i].x1;
		Y[u] = a[i].y1;
		u++;
		X[u] = a[i].x2;
		Y[u] = a[i].y2;
	}
	for (int i = 1; i < u; i++)
	{
		for (int j = i + 1; j <= u; j++)
		{
			if (X[i] > X[j])
			{
				swap(X[i], X[j]);
			}
		}
	}
	for (int i = 1; i < u; i++)
	{
		for (int j = i + 1; j <= u; j++)
		{
			if (Y[i] > Y[j])
			{
				swap(Y[i], Y[j]);
			}
		}
	}
	for (int i = 1; i < u; i++)
	{
		for (int j = 1; j < u; j++)
		{
			for (int k = 1; k <= n; k++)
			{
				if (check(a[k], X[i], Y[j + 1], X[i + 1], Y[j]))
				{
					s += (X[i + 1] - X[i]) * (Y[j + 1] - Y[j]);
					break;
				}
			}
		}
	}
	cout << s;
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
