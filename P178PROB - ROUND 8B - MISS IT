#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
struct thisinh
{
	int id;
	int d = 0;
	int s1 = 0;
	int s2 = 0;
};
bool cmp(thisinh a, thisinh b)
{
	if (a.d == b.d)
	{
		if (a.s1 == b.s1)
		{
			if (a.s2 == b.s2)
				return a.id < b.id;
			return a.s2 > b.s2;
		}
		return a.s1 > b.s1;
	}
	return a.d > b.d;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	while (1)
	{
		int n;
		cin >> n;
		if (n == 0)
			return 0;
		int x, k;
		vector<thisinh> a;
		for (int i = 1; i <= n; i++)
		{
			cin >> x;
			for (int j = 1; j <= x; j++)
			{
				int ok = -1;
				cin >> k;
				for (int h = 0; h < a.size(); h++)
				{
					if (a[h].id == k)
					{
						ok = h;
						break;
					}
				}
				if (ok == -1)
				{
					thisinh c;
					c.id = k;
					if (j == 1)
					{
						c.s1++;
						c.d += 3;
					}
					else if (j == 2)
					{
						c.s2++;
						c.d += 2;
					}
					else if (j == 3)
						c.d += 1;
					a.push_back(c);
				}
				else
				{
					if (j == 1)
					{
						a[ok].s1++;
						a[ok].d += 3;
					}
					else if (j == 2)
					{
						a[ok].s2++;
						a[ok].d += 2;
					}
					else if (j == 3)
						a[ok].d += 1;
				}
			}
		}
		sort(a.begin(), a.end(), cmp);
		int j = 1;
		while (1)
		{
			if (a[j].d == a[0].d && a[j].s1 == a[0].s1 && a[j].s2 == a[0].s2)
				j++;
			else
				break;
		}
		for (int i = 0; i < j; i++)
			cout << a[i].id << " ";
		cout << endl;
	}
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
