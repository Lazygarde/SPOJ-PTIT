#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
int n, ok = 1;
int Try(int a[], int pos)
{
    if (pos > 1 && a[pos - 1] == a[pos - 2] && a[pos - 1])
    {
        if (a[pos - 1] == 1)
            a[pos] = 2;
        else
            a[pos] = 1;
        return 0;
    }
    if (pos < n - 2 && a[pos + 1] == a[pos + 2] && a[pos + 1])
    {
        if (a[pos + 1] == 1)
            a[pos] = 2;
        else
            a[pos] = 1;
        return 1;
    }
    if (pos > 0 && pos < n - 1 && a[pos - 1] == a[pos + 1] && a[pos + 1])
    {
        if (a[pos - 1] == 1)
            a[pos] = 2;
        else
            a[pos] = 1;
        return 1;
    }
    return 0;
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    if (n == 1)
    {
        cout << 0;
        return 0;
    }
    int a[n] = {};
    vector<string> v(5);
    for (int i = 0; i < 5; i++)
    {
        cin >> v[i];
        for (int j = 0; j < n; j++)
        {
            if (v[i][j] == '.')
                a[j] = 1;
            if (v[i][j] == 'X')
                a[j] = 2;
        }
    }
    for (int i = 0; i < n; i++)
        if (!a[i] && Try(a, i) && i > 1)
            i -= 3;
    for (int i = 0; i < n; i++)
        if (!a[i])
        {
            ok = 0;
            break;
        }
    if (ok)
        for (int i = 0; i < n; i++)
            if (a[i] == a[i + 1])
            {
                printf("1");
                i++;
            }
            else
                printf("0");
    else
        printf("UNDETERMINABLE");
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
