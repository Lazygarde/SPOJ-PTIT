#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
string cong(string a, string b)
{
	int ok = 0;
	string s = "";
	if (a.size() > b.size())
		b.insert(0, a.size() - b.size(), '0');
	else if (a.size() < b.size())
		a.insert(0, b.size() - a.size(), '0');
	int temp = 0;
	for (int i = a.size() - 1; i >= 0; i--)
	{
		temp = a[i] + b[i] - 96 + temp;
		s.insert(0, 1, temp % 10 + 48);
		temp = temp / 10;
	}
	if (temp > 0)
		s.insert(0, 1, temp + 48);
	return s;
}
string nhanNho(char a, string b)
{
	string s = "";
	int temp = 0;
	for (int i = b.length() - 1; i >= 0; i--)
	{
		temp = (a - 48) * (b[i] - 48) + temp;
		s.insert(0, 1, (temp % 10 + 48));
		temp = temp / 10;
	}
	if (temp > 0)
		s.insert(0, 1, (temp + 48));
	return s;
}
string nhan(string a, string b)
{
	string s = "";
	int l = a.length();
	string s1[l];
	for (int i = l - 1; i >= 0; i--)
	{
		s1[i] = nhanNho(a[i], b);
		s1[i].insert(s1[i].length(), l - i - 1, '0');
		s = cong(s, s1[i]);
	}
	return s;
}
bool checkst(string a, string b)
{
	if (a.size() != b.size())
		return 0;
	int n = a.size();
	for (int i = 0; i < a.size(); i++)
	{
		int pos = 0;
		while (a[(pos + i) % n] == b[pos] && pos < n)
			pos++;
		if (pos == n)
			return 1;
	}
	return 0;
}
bool check(string s)
{
	int n = s.size();
	string ss = s;
	while (s[0] == '0' && s.size() > 1)
		s.erase(s.begin(), s.begin() + 1);
	for (int i = 1; i <= n; i++)
	{
		string tmp = nhan(s, to_string(i));
		while (tmp.size() < n)
			tmp.insert(0, 1, '0');
		if (!checkst(ss, tmp))
			return 0;
	}
	return 1;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	string s;
	while (cin >> s)
	{
		if (check(s))
			cout << s << " is cyclic" << endl;
		else
			cout << s << " is not cyclic" << endl;
	}
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
